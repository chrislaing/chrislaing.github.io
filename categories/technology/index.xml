<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>technology on chrislaing.net</title>
    <link>http://chrislaing.net/categories/technology/index.xml</link>
    <description>Recent content in technology on chrislaing.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://chrislaing.net/categories/technology/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Keybase: Keys for everyone! Part I</title>
      <link>http://chrislaing.net/blog/keybase-keys-for-everyone-part-i/</link>
      <pubDate>Sun, 13 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://chrislaing.net/blog/keybase-keys-for-everyone-part-i/</guid>
      <description>&lt;p&gt;


    
    
        
        
        
        
    

    
    
    

    
    




    
    
        
    


    

    
        &lt;span class=&#34;image right&#34;&gt;
            &lt;img src=&#34;http://chrislaing.net/img/2016/11/chrislaing_keybase_proof_graph.png&#34; alt=&#34;Graph of Keybase proofs for Keybase user chrislaing&#34; /&gt;
        &lt;/span&gt;
    


Encryption is a topic that has fascinated me for years, less because of its mathematical basis than its applications, both existing and potential. By far my favourite project in this realm is &lt;a href=&#34;https://keybase.io&#34;&gt;Keybase&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keybase cleverly solves several major problems with PGP-based encryption technology by taking the attitude that online, your identity is functionally the sum of your online profiles. With Keybase, you can automatically verify that &lt;a href=&#34;https://twitter.com/CJLaing&#34;&gt;@cjlaing&lt;/a&gt; on twitter has a particular key, and can encrypt messages or files for him without having to ascertain and validate his key through some other medium. The client software is open source, and works seamlessly with both PGP and NaCl keys.&lt;/p&gt;

&lt;p&gt;One of the truly excellent features of Keybase&amp;rsquo;s design is its trust model; although their website and file hosting service offers a centralised interface, that interface is entirely orthogonal to the operation of the service. When you want to id someone and verify their key (&lt;a href=&#34;https://keybase.io/chrislaing&#34;&gt;me, for example&lt;/a&gt;), the Keybase client goes to each of their listed web identities, finds the proof, and verifies it, without needing to trust the &lt;a href=&#34;https://keybase.io&#34;&gt;keybase.io&lt;/a&gt; website at all. Every time a user verifies someone&amp;rsquo;s identity by tracking them, this proof is written into the blockchain. The entire chain can then be independently verified, without requiring anyone to trust Keybase itself.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://keybase.io/docs/kbfs&#34;&gt;Keybase filesystem&lt;/a&gt; is an extremely clever extension of the core Keybase concept. What I find most interesting is the idea that, in principle, data can be securely shared with someone who hasn&amp;rsquo;t yet signed up for Keybase, whom you know purely through one of their online identities. When they join Keybase and prove their ownership of that identity, your client will verify the proof and encrypt the file for them.&lt;/p&gt;

&lt;p&gt;Keybase is still in an invitation-only testing phase, however they already have over 100,000 users as of the time of writing. The project is bringing a lot of great new ideas together with solid, tried, and tested cryptography, and I&amp;rsquo;m excited to see where the project goes next.&lt;/p&gt;

&lt;p&gt;In Part II of this post, we&amp;rsquo;ll take a look at how to verify Keybase proofs yourself, and traverse a user&amp;rsquo;s cryptographic chain using Python.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>